#!/usr/bin/python2.7
"""
Companion script to stew.

This script uploads a given package, generates a sha1
hash of the package, and optionally updates a given catalog
with the package information.

usage: uptodate [-h] [-p PACKAGE] [-c CATALOG]

optional arguments:
  -h, --help            show this help message and exit
  -p PACKAGE, --package PACKAGE
                        /path/to/package
  -c CATALOG, --catalog CATALOG
                        /path/to/catalog
"""

##############################################################################
# Copyright 2015 Joseph Chilcote
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy
#  of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##############################################################################

__author__  = 'Joseph Chilcote (chilcote@gmail.com)'
__version__ = '1.0.0'

import os
import sys
import re
import subprocess
import hashlib
import json
import argparse

CONFIG = os.path.join(os.getenv('HOME'), '.stew_config')

def colored(text, color=None):
    if not os.getenv('ANSI_COLORS_DISABLED'):
        fmt_str = '\033[%dm'
        reset = '\033[0m'
        colors = {
            'grey': 30,
            'gray': 30,
            'red': 31,
            'green': 32,
            'yellow': 33,
            'blue': 34,
            'magenta': 35,
            'cyan': 36,
            'white': 37,
        }
        if color is not None:
            text = fmt_str % (colors[color]) + text + reset
    return text

def run_cmd(cmd, stream_out=False):
    '''Runs a command and returns a tuple of stdout, stderr, returncode.'''
    if stream_out:
        task = subprocess.Popen(cmd)
    else:
        task = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)
    (stdout, stderr) = task.communicate()
    return stdout, stderr, task.returncode

def import_config(config):
    '''Returns data from config file.'''
    try:
        with open(config) as f:
            d = json.load(f)
    except NameError as err:
        print colored('%s; bailing script.' % err, 'red')
        sys.exit(1)
    except IOError as err:
        print colored('%s: %s' % (err.strerror, config), 'red')
        sys.exit(1)
    return d['webserver'], d['path'], d['login']

def import_catalog(catalog):
    '''Imports user-defined catalog'''
    try:
        with open(catalog) as f:
            d = json.load(f)
    except NameError as err:
        print colored('%s; bailing script.' % err, 'red')
        sys.exit(1)
    except IOError as err:
        print colored('%s: %s' % (err.strerror, catalog), 'red')
        sys.exit(1)
    return d

def get_checksum(pkg):
    """Returns sha1 checksum of package."""
    statinfo = os.stat(pkg)
    if statinfo.st_size/1048576 < 200:
        f_content = open(pkg, 'r').read()
        f_hash = hashlib.sha1(f_content).hexdigest()
        return f_hash
    else:
        cmd = ['shasum', pkg]
        (stdout, unused_sterr, unused_rc) = run_cmd(cmd)
        return stdout.split()[0]

def upload_pkg(pkg, login, webserver, serverpath):
    '''Uploads package.'''
    cmd = ['scp', pkg, '%s@%s:%s' % (login, webserver, serverpath)]
    run_cmd(cmd)

def update_catalog(catalog, d):
    with open(catalog, 'w') as f:
        json.dump(d, f, indent=4, separators=(',', ': '))

def print_catalog(catalog):
    print colored('OS Catalog: %s' % catalog['os-catalog'], 'cyan')
    print colored('Output Name: %s' % catalog['output-name'], 'cyan')
    print colored('Volume Name: %s' % catalog['volume-name'], 'cyan')
    print colored('Packages:', 'cyan')
    for i in catalog['packages']:
        print colored(' %s' % i[0], 'cyan')


def main():
    '''Main method'''
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--package', help='/path/to/package')
    parser.add_argument('-c', '--catalog', help='/path/to/catalog')
    args = parser.parse_args()

    if not os.path.exists(CONFIG):
        print colored('Your stew environment has not been configured.' \
                '\nPlease run stew -c to create a config file.', 'red')
        sys.exit(1)

    webserver, serverpath, login = import_config(CONFIG)
    webpath = os.path.basename(serverpath)

    if args.package:
        package = args.package
        checksum = get_checksum(package)
        print colored('Uploading package: %s...' % package, 'cyan')
        upload_pkg(package, login, webserver, serverpath)

        if args.catalog:
            catalog = import_catalog(args.catalog)
            replace = raw_input(colored('Are you replacing a package? (y/n): ', 'green'))
            if replace == 'y':
                for i in enumerate(catalog['packages']):
                    print colored('%s: %s' % (i[0], i[1][0]), 'yellow')
                answer = raw_input(colored('Choose a package to replace: ', 'green'))
                print colored('Updating catalog: %s...' % args.catalog, 'cyan')
                print colored('Removing: %s...' % catalog['packages'][int(answer)][0], 'cyan')
                print colored('Adding: %s...' % package, 'cyan')
                catalog['packages'][int(answer)] = (package, checksum)
                update_catalog(args.catalog, catalog)
                print_catalog(catalog)
        else:
            print colored(os.path.basename(package), checksum, 'cyan')

    if args.catalog and not args.package:
        catalog = import_catalog(args.catalog)
        try:
            catalog['os-catalog']
        except KeyError:
                print colored('Detected OS Catalog, exiting script', 'red')
                sys.exit(0)
        output_name = raw_input(colored('New output-name: ', 'green'))
        volume_name = raw_input(colored('New volume-name: ', 'green'))
        if output_name:
            catalog['output-name'] = output_name
        if volume_name:
            catalog['volume-name'] = volume_name
        update_catalog(args.catalog, catalog)
        print_catalog(catalog)

if __name__ == '__main__':
  main()